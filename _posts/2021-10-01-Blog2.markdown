---
layout: post
title:  "Blog 2"
date:   2021-10-01 12:38:21 -0700
categories: jekyll update
---
What I had recently learned about in class was the functions for working with a dockerfile and how a user can create a custom docker image. Creating the dockerfile was pretty straight forward in terms of writing the code. One part of the assignment that I had trouble with was the naming convention of the dockerfile itself. After some research I used “docker build -t my-image . -f Dockerfile.Dockerfile” to get the dockerfile to be properly implemented. When using the command 'docker build', if you do not explicitly specify the Dockerfile from which you want to build your docker image, then the docker engine, by default, will look for a Dockerfile with the filename 'Dockerfile.Dockerfile' in your original working directory, instead of a Dockerfile with the extension '.Dockerfile'. This was mostly a minor issue within the process of making the docker file but it was easily fixed. The rest of the creation of the dockerfile was simple, and easy for a beginner to understand. In the file I implemented the commands to install wget and curl. After I created the command to create a directory called packages to install node exporter and prometheus. One important factor was to implement a command to change the working directory into packages in order for the files to be properly downloaded and un tarred. After writing the code, I was able to run the dockerfile with my test image and it worked quickly and no mishaps within the testing process. Overall I can see how useful dockerfiles can be when it comes to automation, especially when certain environments have to be brought up quickly or numerously. 
